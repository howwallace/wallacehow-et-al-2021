separate(var, c("var", "Year"), sep="_") %>%
spread(var, val)
# ### for pc_metrics years 2003--2005 and 2006--2007
# # removes empty rows for pc metrics that span multiple years, to make graphing easier later
# non_pc_metrics <- select(metrics_merged_long, !starts_with("PC"))[metrics_merged_long$Year != "2003--2005" & metrics_merged_long$Year != "2006--2007",]
# non_pc_metrics$Year <- as.numeric(non_pc_metrics$Year)
#
# # removes empty rows for non-pc metrics between 2003 and 2007, which are grouped for pc metrics
# pc_metrics <- select(metrics_merged_long, HSA, Year, DCI.00.Quintile, DCI.17.Quintile, DCI.Change, starts_with("PC"))[grepl("--", metrics_merged_long$Year, fixed=TRUE) | metrics_merged_long$Year > 2007,]
# pc_metrics[grepl("2003--2005", pc_metrics$Year),]$Year <- "2004"
# pc_metrics[grepl("2006--2007", pc_metrics$Year),]$Year <- "2006.5"
# pc_metrics$Year <- as.numeric(pc_metrics$Year)
### for pc_metrics years 2003--2007
# removes empty rows for pc metrics that span multiple years, to make graphing easier later
non_pc_metrics <- select(metrics_merged_long, !starts_with("PC"))[metrics_merged_long$Year != "2003--2007",]
non_pc_metrics$Year <- as.numeric(non_pc_metrics$Year)
# removes empty rows for non-pc metrics between 2003 and 2007, which are grouped for pc metrics
pc_metrics <- select(metrics_merged_long, HSA, Year, DCI.00.Quintile, DCI.17.Quintile, DCI.Change, starts_with("PC"))[grepl("--", metrics_merged_long$Year, fixed=TRUE) | metrics_merged_long$Year > 2007,]
pc_metrics[grepl("2003--2007", pc_metrics$Year),]$Year <- "2005"
pc_metrics$Year <- as.numeric(pc_metrics$Year)
# compute percent of HSAs that have data for each DCI change group (DCI.Change), for each metric (Metric), for each year (Year)
percent_complete_by_group_by_metric_by_year <- metrics_merged[metrics_merged$DCI.Change != "OTHER",-c(2:3)] %>%
gather("Metric", "val", -c(1:2)) %>%
separate(Metric, c("Metric", "Year"), sep="_") %>%
group_by(DCI.Change, Metric, Year) %>%
summarize(Percent.Complete = sum(!is.na(val)) / length(val), .groups = 'drop')
# compute minimum-across-`Year' percent of HSAs that have data for each DCI change group (DCI.Change), for each metric (Metric)
min_percent_complete_by_group_by_metric <- percent_complete_by_group_by_metric_by_year %>%
group_by(DCI.Change, Metric) %>%
summarize(Min.Percent.Complete = min(Percent.Complete), .groups = 'drop')
# compute minimum-across-`DCI.Change' AND -across-`Year' percent of HSAs that have data for each for each metric (Metric)
min_percent_complete_by_metric <- percent_complete_by_group_by_metric_by_year %>%
group_by(Metric) %>%
summarize(Min.Percent.Complete = min(Percent.Complete), .groups = 'drop')
# e.g.,
# min_percent_complete_by_group_by_metric[min_percent_complete_by_group_by_metric$Metric == 'Med.Ambulatory.Sensitive.per.K',]
min_percent_complete_by_metric[grepl("^PC.", min_percent_complete_by_metric$Metric) & min_percent_complete_by_metric$Min.Percent.Complete > 0.45,]
min_percent_complete_by_metric[grepl("^Reimb.", min_percent_complete_by_metric$Metric),]
percent_complete_by_group_by_metric_by_year[percent_complete_by_group_by_metric_by_year$Metric == 'PC.X.Eye.T',]
inclusion_criterion <- 0.45
cols_majority_complete <- (min_percent_complete_by_metric[min_percent_complete_by_metric$Min.Percent.Complete >= inclusion_criterion,])$Metric
# remove 'Enrollees' and similar columns
cols_majority_complete <- cols_majority_complete[!grepl("Reimb.Enrollees", cols_majority_complete, fixed = TRUE) &
!grepl("Med.Enrollees", cols_majority_complete, fixed = TRUE) &
!grepl("PC.N.A", cols_majority_complete, fixed = TRUE) &
!grepl("PC.N.B", cols_majority_complete, fixed = TRUE) &
!grepl("PC.N.Diabetic", cols_majority_complete, fixed = TRUE) &
!grepl("PC.N.Female", cols_majority_complete, fixed = TRUE) &
!grepl("Surg.Enrollees", cols_majority_complete, fixed = TRUE)]
# remove race (white)-specific data (no black-specific data for 50% cutoff)
cols_majority_complete <- cols_majority_complete[!grepl(".W", cols_majority_complete, fixed = TRUE)]
# remove PC.N.per.K.Ambulatory.Discharges.T (identical to Med.Ambulatory.Sensitive.per.K)
cols_majority_complete <- cols_majority_complete[!grepl("PC.N.per.K.Ambulatory.Discharges.T", cols_majority_complete, fixed = TRUE)]
# remove Med.Excl.ACS.per.K (redundant, since ACS and total are considered)
cols_majority_complete <- cols_majority_complete[!grepl("Med.Excl.ACS.per.K", cols_majority_complete, fixed = TRUE)]
cols_majority_complete
# e.g.,
# min_percent_complete_by_group_by_metric[min_percent_complete_by_group_by_metric$Metric %in% cols_majority_complete,]
ordered_columns <- c("Med.Ambulatory.Sensitive.per.K", "Med.Bacterial.Pneum.per.K", "Med.Congestive.Heart.Failure.per.K", "Med.COPD.per.K",
"PC.X.Ambulatory.T", "PC.X.Mammogram.T", "PC.X.Ac1.T", "PC.X.LDL-C.T",
"Surg.Coronary.Angiography.per.K", "Surg.Back.Surgery.per.K", "Surg.Percutaneous.Coronary.Interventions.per.K", "Surg.Knee.Replacement.per.K",
"Reimb.PASR.Total.Reimb.per.E", "Reimb.PASR.Hospital.SNF.Reimb.per.E", "Reimb.PASR.Physician.Reimb.per.E", "Reimb.PASR.Outpatient.Reimb.per.E", "Reimb.PASR.Home.Health.Reimb.per.E", "Reimb.PASR.Hospice.Reimb.per.E")
y_lims <- hash()
y_lims[["Med.Ambulatory.Sensitive.per.K"]] =                      c(0, 140)
y_lims[["Med.Bacterial.Pneum.per.K"]] =                           c(0, 35)
y_lims[["Med.Congestive.Heart.Failure.per.K"]] =                  c(0, 40)
y_lims[["Med.COPD.per.K"]] =                                      c(0, 25)
y_lims[["Med.Excl.ACS.per.K"]] =                                  c(100, 250)   # new
y_lims[["Med.Kidney.Urinary.Infection.per.K"]] =                  c(0, 20)      # new
y_lims[["Med.Total.per.K"]] =                                     c(150, 350)   # new
y_lims[["PC.X.Ambulatory.T"]] =                                   c(65, 85)
y_lims[["PC.X.Mammogram.T"]] =                                    c(40, 80)
y_lims[["PC.X.Ac1.T"]] =                                          c(65, 90)
y_lims[["PC.X.LDL-C.T"]] =                                        c(65, 85)
y_lims[["PC.N.per.K.Ambulatory.Discharges.T"]] =                  c(55, 85)     # new (ends up being identical to medical discharges)
y_lims[["PC.X.Eye.T"]] =                                          c(55, 75)     # new
y_lims[["Surg.Coronary.Angiography.per.K"]] =                     c(5, 30)
y_lims[["Surg.Back.Surgery.per.K"]] =                             c(3, 6)
y_lims[["Surg.Percutaneous.Coronary.Interventions.per.K"]] =      c(0, 15)
y_lims[["Surg.Knee.Replacement.per.K"]] =                         c(5, 10)
y_lims[["Surg.Hip.Fracture.Hospitalization.per.K"]] =             c(5, 10)      # new
y_lims[["Surg.Total.per.K"]] =                                    c(60, 120)    # new
y_lims[["Reimb.PASR.Total.Reimb.per.E"]] =                        c(6000, 12000)
y_lims[["Reimb.PASR.Hospital.SNF.Reimb.per.E"]] =                 c(3000, 6000)
y_lims[["Reimb.PASR.Physician.Reimb.per.E"]] =                    c(1500, 3500)
y_lims[["Reimb.PASR.Outpatient.Reimb.per.E"]] =                   c(500, 2000)
y_lims[["Reimb.PASR.Home.Health.Reimb.per.E"]] =                  c(0, 1000)
y_lims[["Reimb.PASR.Hospice.Reimb.per.E"]] =                      c(0, 500)
y_lims[["Reimb.PASR.Durable.Medical.Equipment.Reimb.per.E"]] =    c(0, 400)     # new
y_steps <- hash()
y_steps[["Med.Ambulatory.Sensitive.per.K"]] =                     20
y_steps[["Med.Bacterial.Pneum.per.K"]] =                          5
y_steps[["Med.Congestive.Heart.Failure.per.K"]] =                 10
y_steps[["Med.COPD.per.K"]] =                                     5
y_steps[["Med.Excl.ACS.per.K"]] =                                 50      # new
y_steps[["Med.Kidney.Urinary.Infection.per.K"]] =                 5       # new
y_steps[["Med.Total.per.K"]] =                                    50      # new
y_steps[["PC.X.Ambulatory.T"]] =                                  5
y_steps[["PC.X.Mammogram.T"]] =                                   10
y_steps[["PC.X.Ac1.T"]] =                                         5
y_steps[["PC.X.LDL-C.T"]] =                                       5
y_steps[["PC.N.per.K.Ambulatory.Discharges.T"]] =                 5       # new (ends up being identical to medical discharges)
y_steps[["PC.X.Eye.T"]] =                                         5       # new
y_steps[["Surg.Coronary.Angiography.per.K"]] =                    5
y_steps[["Surg.Back.Surgery.per.K"]] =                            1
y_steps[["Surg.Percutaneous.Coronary.Interventions.per.K"]] =     5
y_steps[["Surg.Knee.Replacement.per.K"]] =                        1
y_steps[["Surg.Hip.Fracture.Hospitalization.per.K"]] =            1       # new
y_steps[["Surg.Total.per.K"]] =                                   20      # new
y_steps[["Reimb.PASR.Total.Reimb.per.E"]] =                       1000
y_steps[["Reimb.PASR.Hospital.SNF.Reimb.per.E"]] =                1000
y_steps[["Reimb.PASR.Physician.Reimb.per.E"]] =                   500
y_steps[["Reimb.PASR.Outpatient.Reimb.per.E"]] =                  500
y_steps[["Reimb.PASR.Home.Health.Reimb.per.E"]] =                 200
y_steps[["Reimb.PASR.Hospice.Reimb.per.E"]] =                     100
y_steps[["Reimb.PASR.Durable.Medical.Equipment.Reimb.per.E"]] =   100     # new
y_names <- hash()
# PER 1,000 ENROLLEES
y_names[["Med.Ambulatory.Sensitive.per.K"]] =                     "Ambulatory care sensitive conditions"
y_names[["Med.Bacterial.Pneum.per.K"]] =                          "Bacterial pneumonia"
y_names[["Med.Congestive.Heart.Failure.per.K"]] =                 "Congestive heart failure"
y_names[["Med.COPD.per.K"]] =                                     "COPD"
y_names[["Med.Excl.ACS.per.K"]] =                                 "Medical discharges excluding ACS events"       # new
y_names[["Med.Kidney.Urinary.Infection.per.K"]] =                 "Kidney/urinary infection"                      # new
y_names[["Med.Total.per.K"]] =                                    "Total medical discharges"                      # new
# PERCENT (AMONG RELEVANT GROUP OF ENROLLEES)
y_names[["PC.X.Ambulatory.T"]] =                                  "At least one ambulatory visit to a PCP"
y_names[["PC.X.Mammogram.T"]] =                                   "At least one mammogram (of females 67--69)"      ## OVER TWO-YEAR PERIOD
y_names[["PC.X.Ac1.T"]] =                                         "Hemoglobin A1c test (of diabetics 65--75)"
y_names[["PC.X.LDL-C.T"]] =                                       "Blood lipids (LDL-C) test (of diabetics 65--75)"
y_names[["PC.N.per.K.Ambulatory.Discharges.T"]] =                 "Ambulatory care sensitive conditions"            # new (ends up being identical to medical discharges)
y_names[["PC.X.Eye.T"]] =                                         "Eye exam (of diabetics 65--75)"                  # new
# PER 1,000 ENROLLEES
y_names[["Surg.Coronary.Angiography.per.K"]] =                    "Coronary angiography"
y_names[["Surg.Back.Surgery.per.K"]] =                            "Back surgeries"
y_names[["Surg.Percutaneous.Coronary.Interventions.per.K"]] =     "Percutaneous coronary interventions"
y_names[["Surg.Knee.Replacement.per.K"]] =                        "Knee replacements"
y_names[["Surg.Hip.Fracture.Hospitalization.per.K"]] =            "Hospitalization for hip fracture"      # new
y_names[["Surg.Total.per.K"]] =                                   "Total surgical discharges"             # new
# PER ENROLLEE
y_names[["Reimb.PASR.Hospital.SNF.Reimb.per.E"]] =                "Hospital and skilled nursing facility (PASR-adj)"
y_names[["Reimb.PASR.Physician.Reimb.per.E"]] =                   "Physician reimbursements (PASR-adj)"
y_names[["Reimb.PASR.Outpatient.Reimb.per.E"]] =                  "Outpatient reimbursements (PASR-adj)"
y_names[["Reimb.PASR.Home.Health.Reimb.per.E"]] =                 "Home health reimbursements (PASR-adj)"
y_names[["Reimb.PASR.Hospice.Reimb.per.E"]] =                     "Hospice reimbursements (PASR-adj)"
y_names[["Reimb.PASR.Total.Reimb.per.E"]] =                       "Total (A + B) reimbursements (PASR-adj)"
y_names[["Reimb.PASR.Durable.Medical.Equipment.Reimb.per.E"]] =   "Durable medical equipment (PASR-adj)"             # new
source('methods.R')
metrics_merged %>% select(HSA, DCI.Change)
options(scipen = 0)
count_by_dci_change <- function(df) {
df %>%
group_by(DCI.Change) %>%
summarise(n = n() / ifelse(startsWith(col, "PC."), 10, 13),    # divide by number of years (varies, i.e., 2003--2005, 2006--2007) to get number HSAs
.groups = 'drop')
}
pairwise_p_vals <- data.frame()
gross_p_vals <- data.frame()
do_plot <- FALSE
for (i in 1:length(cols_majority_complete))
{
col <- cols_majority_complete[i]
split_vals <- scan(text=col, sep=".", what="", quiet=TRUE)
col_type <- split_vals[1]                      # extract substring to first ".", to distinguish, e.g. PC v. Med
is_percent_type <- split_vals[2] == "X"        # extract first "." to second "." to determine whether the value is a percent
metrics <- if(col_type == "PC") {  pc_metrics  } else {  non_pc_metrics  }
# need to weight selectively, e.g., mammograms by N female rather than all enrollees
enrollment_weight <- switch(col_type,
"Reimb" = "Reimb.Enrollees",
"Med" = "Med.Enrollees",
"Surg" = "Surg.Enrollees",
"PC" = switch(col,
"PC.N.per.K.Ambulatory.Discharges.T" = "PC.N.A.T",
"PC.X.Ac1.T" = "PC.N.Diabetic.T",
"PC.X.Ambulatory.T" = "PC.N.A.T",
"PC.X.Eye.T" = "PC.N.Diabetic.T",
"PC.X.LDL-C.T" = "PC.N.Diabetic.T",
"PC.X.Diabetic.65.75" = "PC.N.Diabetic.T",
"PC.X.Mammogram.T" = "PC.N.Female.67.69.T",
"PC.X.Female.67.69" = "PC.N.Female.67.69.T",
"PC.X.Ambulatory.T" = "PC.N.B.T"))
subset_1 <- select(metrics[metrics$DCI.Change != "OTHER",], HSA, Year, DCI.Change, enrollment_weight, col)
subset_1$DCI.Change <- factor(subset_1$DCI.Change, levels=c(paste("Lowest >", c("Lowest", "Low", "High")), paste("Highest >", c("Highest", "High", "Low"))))
# remove incomplete cases, which are from HSAs that didn't present a dramatic change in DCI (because columns have already been selected for completeness w/r/t dramatic change HSAs)
subset_1 <- subset_1[complete.cases(subset_1),]
if(do_plot) {
after_removal <- count_by_dci_change(subset_1)
n_included <- round(after_removal$n, 0)
plot_weighted(subset_1, ylab = y_names[[col]],
legend_title = "",
# legend_values assigned in order of factor levels (defined above)
legend_values = c(paste("n = ", n_included[1], "  ", sep=""),             # started and remained low
paste("n = ", n_included[2], "  ", sep=""),             # started low, got slightly worse
paste("n = ", n_included[3], "  ", sep=""),             # started low and got worse
paste("n = ", n_included[4], "  ", sep=""),             # started and remained high
paste("n = ", n_included[5], "  ", sep=""),             # started high, got slightly better
paste("n = ", n_included[6], "  ", sep="")),            # started high and got better
linetype_values = c('solid', 'dashed', 'dotted', 'solid', 'dashed', 'dotted'),
linesize_values = c(0.5, 0.5, 0.5, 1, 1, 1),
y_lims = y_lims[[col]], y_step = y_steps[[col]],
absolute_percent_dollars = ifelse(col_type == "Reimb", 2, ifelse(is_percent_type, 1, 0)),
errors = FALSE) +
guides(linesize=guide_legend(nrow=1,byrow=TRUE)) +
guides(linetype=guide_legend(nrow=1,byrow=TRUE))
height = 5
aspect_ratio = 1.4
ggsave(paste("_drafts/_figures/metrics/", inclusion_criterion, "_", i, "_", col, ".png", sep=""),
height = height, width = height * aspect_ratio, units = "in")
}
# statistical tests
print(col)
###
# ANOVA
p_temp <- anova_by_year(subset_1)
p_temp <- rbind(p_temp, t_by_year(subset_1, "Highest > Low", "Lowest > Lowest"))
p_temp <- rbind(p_temp, t_by_year(subset_1, "Highest > Low", "Highest > Highest"))
p_temp <- rbind(p_temp, t_by_year(subset_1, "Lowest > High", "Lowest > Lowest"))
p_temp <- p_temp %>%
gather("Year", "p.Uncorrected", -1)
# correct only non-ANOVA p-values ## CORRECT ANOVA p-values SEPARATELY
p_temp$P.Corrected = 0
p_temp[p_temp$Tukey.Pair != "ANOVA",]$P.Corrected <- p.adjust(p_temp[p_temp$Tukey.Pair != "ANOVA",]$p.Uncorrected, method="bonferroni")
p_temp[p_temp$Tukey.Pair == "ANOVA",]$P.Corrected <- p.adjust(p_temp[p_temp$Tukey.Pair == "ANOVA",]$p.Uncorrected, method="bonferroni")
p_temp <- p_temp[,-3]
p_temp$P.Corrected <- as.numeric(p_temp$P.Corrected)
colnames(p_temp) <- c("Tukey.Pair", "Year", col)
if (i == 1) {
pairwise_p_vals <- p_temp
} else {
pairwise_p_vals <- full_join(pairwise_p_vals, p_temp, by=c("Tukey.Pair", "Year"))
}
}
pairwise_p_vals
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
hsas_metrics[hsas_metrics$DCI.Change == "Highest > High",]
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
hsas_metrics[hsas_metrics$DCI.Change == "Highest > Low",]
metrics_merged %>%
group_by(DCI.Change) %>%
summarise(n = n(),
.groups = 'drop')
metrics_merged %>%
summarize(n = n())
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- metrics_merged %>%
inner_join(crosswalk_temp, by="HSA") %>%
mutate(DCI.00.Quintile = cut(DCI.2000, breaks=quantile(DCI.2000, seq(0, 1, 0.2)), labels=c("Lowest", "Lower", "Mid", "Higher", "Highest"))) %>%
mutate(DCI.17.Quintile = cut(DCI.2017, breaks=quantile(DCI.2017, seq(0, 1, 0.2)), labels=c("Lowest", "Lower", "Mid", "Higher", "Highest"))) %>%
mutate(DCI.Change = factor(ifelse(DCI.00.Quintile == "Lowest",
ifelse(DCI.17.Quintile == "Lowest", "Lowest > Lowest",
ifelse(DCI.17.Quintile == "Lower", "Lowest > Low", "Lowest > High")),
ifelse(DCI.00.Quintile == "Highest",
ifelse(DCI.17.Quintile == "Highest", "Highest > Highest",
ifelse(DCI.17.Quintile == "Higher", "Highest > High", "Highest > Low")), "OTHER")))) %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- metrics_merged %>%
inner_join(crosswalk_temp, by="HSA") %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- economic_descriptors_2000 %>%
inner_join(economic_descriptors_2017, by="HSA") %>%
inner_join(crosswalk_temp, by="HSA") %>%
inner_join(hsas_metrics, by="HSA") %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
town_names <- town_names[complete.cases(town_names),]
town_names[town_names$DCI.Change == "Highest > Low",]
town_names[town_names$DCI.Change == "Lowest > High",]
hsas_metrics[hsas_metrics$DCI.Change == "Highest > Low",]
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- economic_descriptors_2000 %>%
inner_join(economic_descriptors_2017, by="HSA") %>%
inner_join(crosswalk_temp, by="HSA") %>%
inner_join(hsas_metrics, by="HSA") %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
town_names <- town_names[complete.cases(town_names),]
town_names[town_names$DCI.Change == "Highest > Low",]
town_names[town_names$DCI.Change == "Lowest > High",]
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- economic_descriptors_2000 %>%
inner_join(economic_descriptors_2017, by="HSA") %>%
inner_join(crosswalk_temp, by="HSA") %>%
inner_join(hsas_metrics, by="HSA") %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
town_names <- town_names[complete.cases(town_names),]
town_names[town_names$DCI.Change == "Highest > Low",]
town_names[town_names$DCI.Change == "Lowest > High",]
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- economic_descriptors_2000 %>%
inner_join(economic_descriptors_2017, by="HSA") %>%
inner_join(crosswalk_temp, by="HSA") %>%
inner_join(hsas_metrics, by="HSA") %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
town_names <- town_names[complete.cases(town_names),]
print(town_names[town_names$DCI.Change == "Highest > Low",])
town_names[town_names$DCI.Change == "Lowest > High",]
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- economic_descriptors_2000 %>%
inner_join(economic_descriptors_2017, by="HSA") %>%
inner_join(crosswalk_temp, by="HSA") %>%
inner_join(hsas_metrics, by="HSA") %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
town_names <- town_names[complete.cases(town_names),]
high_to_low <- town_names[town_names$DCI.Change == "Highest > Low",]
low_to_high <- town_names[town_names$DCI.Change == "Lowest > High",]
write.table(high_to_low, file = "high_to_low.txt", sep = ",", quote = FALSE, row.names = F)
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- economic_descriptors_2000 %>%
inner_join(economic_descriptors_2017, by="HSA") %>%
inner_join(crosswalk_temp, by="HSA") %>%
inner_join(hsas_metrics, by="HSA") %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
town_names <- town_names[complete.cases(town_names),]
high_to_low <- town_names[town_names$DCI.Change == "Highest > Low",]
low_to_high <- town_names[town_names$DCI.Change == "Lowest > High",]
write.table(high_to_low, file = "/drafts/_tables/high_to_low.txt", sep = ",", quote = FALSE, row.names = F)
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- economic_descriptors_2000 %>%
inner_join(economic_descriptors_2017, by="HSA") %>%
inner_join(crosswalk_temp, by="HSA") %>%
inner_join(hsas_metrics, by="HSA") %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
town_names <- town_names[complete.cases(town_names),]
high_to_low <- town_names[town_names$DCI.Change == "Highest > Low",]
low_to_high <- town_names[town_names$DCI.Change == "Lowest > High",]
write.table(high_to_low, file = "/_drafts/_tables/high_to_low.txt", sep = ",", quote = FALSE, row.names = F)
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- economic_descriptors_2000 %>%
inner_join(economic_descriptors_2017, by="HSA") %>%
inner_join(crosswalk_temp, by="HSA") %>%
inner_join(hsas_metrics, by="HSA") %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
town_names <- town_names[complete.cases(town_names),]
high_to_low <- town_names[town_names$DCI.Change == "Highest > Low",]
low_to_high <- town_names[town_names$DCI.Change == "Lowest > High",]
write.table(high_to_low, file = "_drafts/_tables/high_to_low.txt", sep = ",", quote = FALSE, row.names = F)
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- economic_descriptors_2000 %>%
inner_join(economic_descriptors_2017, by="HSA") %>%
inner_join(crosswalk_temp, by="HSA") %>%
inner_join(hsas_metrics, by="HSA") %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
town_names <- town_names[complete.cases(town_names),]
high_to_low <- town_names[town_names$DCI.Change == "Highest > Low",]
low_to_high <- town_names[town_names$DCI.Change == "Lowest > High",]
write.table(high_to_low, file = "_drafts/_tables/high_to_low.txt", sep = ",", quote = FALSE, row.names = F)
write.table(low_to_high, file = "_drafts/_tables/low_to_high.txt", sep = ",", quote = FALSE, row.names = F)
hsas_metrics <- metrics_merged %>% select(HSA, DCI.Change)
crosswalk_temp <- crosswalk_raw %>% select(hsanum, hsacity, hsastate)
colnames(crosswalk_temp) <- c('HSA', 'City', 'State')
# multiple zip codes belong to the same HSAs; ignore them
crosswalk_temp <- unique(crosswalk_temp)
town_names <- economic_descriptors_2000 %>%
inner_join(economic_descriptors_2017, by="HSA") %>%
inner_join(crosswalk_temp, by="HSA") %>%
inner_join(hsas_metrics, by="HSA") %>%
select(City, State, DCI.Change, Total.Pop.2000, Total.Pop.2017)
town_names <- town_names[complete.cases(town_names),]
high_to_low <- town_names[town_names$DCI.Change == "Highest > Low",]
high_to_low <- high_to_low %>% select(City, State, Total.Pop.2000, Total.Pop.2017)
write.table(high_to_low, file = "_drafts/_tables/high_to_low.txt", sep = ",", quote = FALSE, row.names = F)
low_to_high <- town_names[town_names$DCI.Change == "Lowest > High",]
low_to_high <- low_to_high %>% select(City, State, Total.Pop.2000, Total.Pop.2017)
write.table(low_to_high, file = "_drafts/_tables/low_to_high.txt", sep = ",", quote = FALSE, row.names = F)
high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
library(rcompanion)
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
groupwiseMean(Steps ~ 1,
data   = high_to_low$Pop.Ratio,
conf   = 0.95,
digits = 3)
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
error <- qt(0.975,df=n-1)*s/sqrt(n)
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
n = 10
error <- qt(0.975,df=n-1)*s/sqrt(n)
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
n = 10
s = 2
error <- qt(0.975,df=n-1)*s/sqrt(n)
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
n = 10
s = 2
error <- qt(0.975,df=n-1)*s/sqrt(n)
print error
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
n = 10
s = 2
error <- qt(0.975,df=n-1)*s/sqrt(n)
error
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
confidence_interval_around_mean(high_to_low$Pop.Ratio)
# r version: 4.0.5
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/harperwallace/Dropbox/GitHub/howw-dci-quality-measures-2021/')
library(reshape2)
library(ggplot2)
library(dplyr)
library(tidyr)
library(diagis)
library(scales)
library(hash)
library(multcomp)
library(car)
library(userfriendlyscience)
library(data.table)
library(nlme)
source('methods.R')
select <- dplyr::select
summarize <- dplyr::summarize
source('methods.R')
#source('methods.R')
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
confidence_interval_around_mean(high_to_low$Pop.Ratio)
#source('methods.R')
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
print(len(high_to_low$Pop.Ratio))
#source('methods.R')
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
print(length(high_to_low$Pop.Ratio))
confidence_interval_around_mean(high_to_low$Pop.Ratio)
source('methods.R')
source('wallacehow-et-al-2021/methods.R')
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
confidence_interval_around_mean(high_to_low$Pop.Ratio)
source('wallacehow-et-al-2021/methods.R')
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
print(stdev(high_to_low$Pop.Ratio))
source('wallacehow-et-al-2021/methods.R')
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
print(sd(high_to_low$Pop.Ratio))
confidence_interval_around_mean(high_to_low$Pop.Ratio)
source('wallacehow-et-al-2021/methods.R')
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
print(sd(high_to_low$Pop.Ratio))
confidence_interval_around_mean(high_to_low$Pop.Ratio)
source('wallacehow-et-al-2021/methods.R')
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
confidence_interval_around_mean(high_to_low$Pop.Ratio)
low_to_high <- low_to_high %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
confidence_interval_around_mean(low_to_high$Pop.Ratio)
source('wallacehow-et-al-2021/methods.R')
high_to_low <- high_to_low %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
confidence_interval_around_mean(high_to_low$Pop.Ratio)
low_to_high <- low_to_high %>%
mutate(Pop.Ratio = Total.Pop.2017 / Total.Pop.2000)
confidence_interval_around_mean(low_to_high$Pop.Ratio)
print(length(low_to_high$Pop.Ratio))
